import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ChatMemberAdministrator,
    ChatMemberOwner,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import sqlite3
from datetime import datetime, timedelta
import os
import calendar
import schedule
import time
import threading

WHATSAPP_NUMBER = "5579991196359"

from dotenv import load_dotenv

load_dotenv()

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)

# Token do bot (deve ser configurado via vari√°vel de ambiente)
BOT_TOKEN = os.getenv("BOT_TOKEN", "SEU_TOKEN_AQUI")

# Inicializa√ß√£o do bot e dispatcher
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# Estados para o FSM (Finite State Machine)


class SelecaoHorarioStates(StatesGroup):
    escolhendo_data = State()
    escolhendo_horario = State()
    servico_selecionado = State()


class AdminStates(StatesGroup):
    programando_mensagem = State()
    configurando_grupo = State()
    programando_mensagem_horario = State()
    selecionando_grupos_para_mensagem = State()
    programando_mensagem_horario_grupos_especificos = State()


# Configura√ß√£o do banco de dados
def init_db():
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    # Tabela de mensagens programadas
    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS mensagens_programadas (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            mensagem TEXT NOT NULL,
            horario TEXT NOT NULL,
            dias_semana TEXT,
            ativo BOOLEAN DEFAULT 1,
            grupo_id TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """
    )

    # Tabela de configura√ß√µes
    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS configuracoes (
            chave TEXT PRIMARY KEY,
            valor TEXT NOT NULL
        )
    """
    )

    # Tabela de pagamentos
    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS pagamentos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            payment_id TEXT,
            preference_id TEXT,
            external_reference TEXT,
            status TEXT,
            amount REAL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """
    )

    # Tabela de grupos gerenciados
    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS grupos_gerenciados (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            grupo_id TEXT NOT NULL,
            nome_grupo TEXT,
            tipo TEXT DEFAULT 'previas',
            ativo BOOLEAN DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """
    )

    conn.commit()
    conn.close()


# Pre√ßos dos servi√ßos
PRECOS = {"1h": 250.00, "2h": 500.00, "3h": 750.00, "pernoite": 2000.00}

# Dura√ß√£o dos servi√ßos em horas
DURACOES = {
    "1h": 1,
    "2h": 2,
    "3h": 3,
    "pernoite": 12,  # Considerando pernoite como 12 horas
}

# Hor√°rios dispon√≠veis (24h)
HORARIOS_DISPONIVEIS = [
    "08:00",
    "09:00",
    "10:00",
    "11:00",
    "12:00",
    "13:00",
    "14:00",
    "15:00",
    "16:00",
    "17:00",
    "18:00",
    "19:00",
    "20:00",
    "21:00",
    "22:00",
    "23:00",
]

# ID da vendedora (deve ser configurado)
VENDEDORA_ID = os.getenv("VENDEDORA_ID", "123456789")  # Substitua pelo ID real


# Fun√ß√£o para verificar se o bot √© admin de um grupo
async def verificar_admin_grupo(grupo_id):
    try:
        bot_member = await bot.get_chat_member(grupo_id, bot.id)
        return isinstance(bot_member, (ChatMemberAdministrator, ChatMemberOwner))
    except Exception as e:
        logging.error(f"Erro ao verificar admin do grupo {grupo_id}: {e}")
        return False


# Fun√ß√£o para salvar grupo gerenciado
def salvar_grupo_gerenciado(grupo_id, nome_grupo, tipo="previas"):
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    cursor.execute(
        """
        INSERT OR REPLACE INTO grupos_gerenciados (grupo_id, nome_grupo, tipo, ativo)
        VALUES (?, ?, ?, 1)
    """,
        (grupo_id, nome_grupo, tipo),
    )

    conn.commit()
    conn.close()


# Fun√ß√£o para obter grupos gerenciados
def obter_grupos_gerenciados():
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM grupos_gerenciados WHERE ativo = 1")
    grupos = cursor.fetchall()

    conn.close()
    return grupos


# Fun√ß√£o para salvar mensagem programada
def salvar_mensagem_programada(mensagem, horario, dias_semana=None, grupo_id=None):
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    cursor.execute(
        """
        INSERT INTO mensagens_programadas (mensagem, horario, dias_semana, grupo_id, ativo)
        VALUES (?, ?, ?, ?, 1)
    """,
        (mensagem, horario, dias_semana, grupo_id),
    )

    mensagem_id = cursor.lastrowid
    conn.commit()
    conn.close()

    return mensagem_id


# Fun√ß√£o para obter mensagens programadas ativas
def obter_mensagens_programadas():
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM mensagens_programadas WHERE ativo = 1")
    mensagens = cursor.fetchall()

    conn.close()
    return mensagens


# Fun√ß√£o para enviar mensagem para grupo
async def enviar_mensagem_grupo(grupo_id, mensagem):
    try:
        await bot.send_message(grupo_id, mensagem, parse_mode="Markdown")
        logging.info(f"Mensagem enviada para grupo {grupo_id}")
        return True
    except Exception as e:
        logging.error(f"Erro ao enviar mensagem para grupo {grupo_id}: {e}")
        return False


# Fun√ß√£o para processar mensagens programadas
async def processar_mensagens_programadas():
    """Fun√ß√£o que roda em background para enviar mensagens programadas"""
    while True:
        try:
            agora = datetime.now()
            hora_atual = agora.strftime("%H:%M")
            dia_semana = agora.weekday()  # 0 = segunda, 6 = domingo

            mensagens = obter_mensagens_programadas()

            for msg in mensagens:
                (
                    msg_id,
                    mensagem,
                    horario,
                    dias_semana_str,
                    ativo,
                    grupo_id,
                    created_at,
                ) = msg

                # Verificar se √© a hora certa
                if horario == hora_atual:
                    # Verificar se √© o dia da semana correto (se especificado)
                    if dias_semana_str:
                        dias_permitidos = [int(d) for d in dias_semana_str.split(",")]
                        if dia_semana not in dias_permitidos:
                            continue

                    # Enviar mensagem
                    if grupo_id:
                        await enviar_mensagem_grupo(grupo_id, mensagem)
                    else:
                        # Se n√£o tem grupo espec√≠fico, enviar para todos os grupos
                        grupos = obter_grupos_gerenciados()
                        for grupo in grupos:
                            await enviar_mensagem_grupo(
                                grupo[1], mensagem
                            )  # grupo[1] √© o grupo_id

            # Aguardar 60 segundos antes da pr√≥xima verifica√ß√£o
            await asyncio.sleep(60)

        except Exception as e:
            logging.error(f"Erro no processamento de mensagens programadas: {e}")
            await asyncio.sleep(60)


# Fun√ß√£o para criar o menu principal
def get_main_menu():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí∞ Ver Pre√ßos", callback_data="ver_precos")],
            [
                InlineKeyboardButton(
                    text="üë• Grupo de Pr√©vias", callback_data="grupo_previas"
                )
            ],
            [InlineKeyboardButton(text="ÔøΩ Contato", callback_data="contato")],
        ]
    )
    return keyboard


# Fun√ß√£o para criar o menu de pre√ßos
def get_precos_menu():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="1 hora - R$ 250/Meu-Local", callback_data="selecionar_data_1h"
                )
            ],
            [
                InlineKeyboardButton(
                    text="Casal - R$ 400/Meu-Local", callback_data="selecionar_data_2h"
                )
            ],
            [
                InlineKeyboardButton(
                    text="Casal - R$ 500/Hotel-Motel",
                    callback_data="selecionar_data_3h",
                )
            ],
            [
                InlineKeyboardButton(
                    text="Invers√£o - R$ 300", callback_data="selecionar_data_pernoite"
                )
            ],
            [InlineKeyboardButton(text="üîô Voltar", callback_data="voltar_menu")],
        ]
    )
    return keyboard


# Fun√ß√£o para criar o menu de agendamento


# Fun√ß√£o para criar calend√°rio de datas
def get_calendar_keyboard(year=None, month=None):
    if year is None:
        year = datetime.now().year
    if month is None:
        month = datetime.now().month

    # Criar calend√°rio
    cal = calendar.monthcalendar(year, month)
    month_name = calendar.month_name[month]

    keyboard = []

    # Cabe√ßalho com m√™s e ano
    keyboard.append(
        [InlineKeyboardButton(text=f"{month_name} {year}", callback_data="ignore")]
    )

    # Dias da semana
    keyboard.append(
        [
            InlineKeyboardButton(text="S", callback_data="ignore"),
            InlineKeyboardButton(text="T", callback_data="ignore"),
            InlineKeyboardButton(text="Q", callback_data="ignore"),
            InlineKeyboardButton(text="Q", callback_data="ignore"),
            InlineKeyboardButton(text="S", callback_data="ignore"),
            InlineKeyboardButton(text="S", callback_data="ignore"),
            InlineKeyboardButton(text="D", callback_data="ignore"),
        ]
    )

    # Dias do m√™s
    today = datetime.now().date()
    for week in cal:
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
            else:
                date_obj = datetime(year, month, day).date()
                if date_obj < today:
                    # Data passada - n√£o clic√°vel
                    row.append(
                        InlineKeyboardButton(text=str(day), callback_data="ignore")
                    )
                else:
                    # Data futura - clic√°vel
                    date_str = f"{year}-{month:02d}-{day:02d}"
                    row.append(
                        InlineKeyboardButton(
                            text=str(day), callback_data=f"data_{date_str}"
                        )
                    )
        keyboard.append(row)

    # Navega√ß√£o entre meses
    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1

    keyboard.append(
        [
            InlineKeyboardButton(
                text="‚óÄÔ∏è", callback_data=f"cal_{prev_year}_{prev_month}"
            ),
            InlineKeyboardButton(text="üîô Voltar", callback_data="ver_precos"),
            InlineKeyboardButton(
                text="‚ñ∂Ô∏è", callback_data=f"cal_{next_year}_{next_month}"
            ),
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# Fun√ß√£o para criar menu de hor√°rios
def get_horarios_keyboard(data, servico):
    keyboard = []

    # Agrupar hor√°rios em linhas de 3
    for i in range(0, len(HORARIOS_DISPONIVEIS), 3):
        row = []
        for j in range(i, min(i + 3, len(HORARIOS_DISPONIVEIS))):
            horario = HORARIOS_DISPONIVEIS[j]
            row.append(
                InlineKeyboardButton(
                    text=horario, callback_data=f"confirmar_{data}_{horario}_{servico}"
                )
            )
        keyboard.append(row)

    keyboard.append(
        [
            InlineKeyboardButton(
                text="üîô Escolher outra data",
                callback_data=f"selecionar_data_{servico}",
            )
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# Fun√ß√£o para notificar a vendedora
async def notificar_vendedora(mensagem):
    try:
        await bot.send_message(VENDEDORA_ID, mensagem, parse_mode="Markdown")
    except Exception as e:
        logging.error(f"Erro ao notificar vendedora: {e}")


# Comando /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message, state: FSMContext):
    await state.clear()  # Limpar qualquer estado anterior

    # Verificar se o comando foi enviado em um grupo
    if message.chat.type in ["group", "supergroup"]:
        if str(message.from_user.id) == VENDEDORA_ID:
            if await verificar_admin_grupo(message.chat.id):
                salvar_grupo_gerenciado(str(message.chat.id), message.chat.title)
                await message.reply(
                    "Ol√°! Este grupo foi configurado para receber mensagens programadas. Use /admin no chat privado para gerenciar."
                )
            else:
                await message.reply(
                    "Ol√°! Para configurar este grupo, preciso ser administrador."
                )
        else:
            await message.reply(
                "Ol√°! Para interagir comigo, por favor, me chame no chat privado."
            )
        return

    # Mensagem de boas-vindas no chat privado
    welcome_message = (
        "Ol√°! Seja bem-vindo(a) ao meu sistema de agendamento. ‚ú®\n\n"
        "Aqui voc√™ pode:\n"
        "üí∞ **Ver Pre√ßos:** Consulte os valores dos meus atendimentos.\n"
        "üë• **Grupo de Pr√©vias:** Acesse meu grupo exclusivo com conte√∫dos especiais.\n"
        "üìû **Contato:** Fale diretamente comigo.\n\n"
        "Selecione uma op√ß√£o abaixo para come√ßar:\n"
    )

    await message.reply(welcome_message, reply_markup=get_main_menu())


# Comando /admin (apenas para vendedora)
@dp.message(Command("admin"))
async def admin_panel(message: types.Message, state: FSMContext):
    if str(message.from_user.id) != VENDEDORA_ID:
        await message.reply("‚ùå Voc√™ n√£o tem permiss√£o para acessar este comando.")
        return

    if message.chat.type != "private":
        await message.reply("Por favor, use este comando no chat privado comigo.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìù Programar Mensagem", callback_data="admin_programar_msg"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚öôÔ∏è Configura√ß√µes", callback_data="admin_config"
                )
            ],  # Futuro
        ]
    )
    await message.reply("Painel Administrativo:", reply_markup=keyboard)


# Processamento de callbacks (bot√µes)
@dp.callback_query()
async def process_callback(query: types.CallbackQuery, state: FSMContext):
    query_data = query.data
    user_id = query.from_user.id
    username = query.from_user.username or query.from_user.first_name

    await query.answer()  # Importante para remover o "loading" do bot√£o

    if query_data == "ver_precos":
        await query.message.edit_text(
            "Confira meus valores:", reply_markup=get_precos_menu()
        )

    elif query_data.startswith("selecionar_data_"):
        servico = query_data.split("_")[1]
        await state.update_data(servico_selecionado=servico)
        await query.message.edit_text(
            "Selecione a data desejada:", reply_markup=get_calendar_keyboard()
        )
        await state.set_state(SelecaoHorarioStates.escolhendo_data)

    elif query_data.startswith("cal_"):
        _, year, month = query_data.split("_")
        await query.message.edit_reply_markup(
            reply_markup=get_calendar_keyboard(int(year), int(month))
        )

    elif query_data.startswith("data_"):
        data_selecionada_str = query_data.split("_")[1]
        # CORRE√á√ÉO APLICADA AQUI:
        await state.update_data(data_selecionada=data_selecionada_str)
        user_data = await state.get_data()
        servico = user_data.get("servico_selecionado")

        if not servico:
            await query.message.edit_text(
                "‚ùå Ocorreu um erro. Por favor, comece o agendamento novamente.",
                reply_markup=get_main_menu(),
            )
            await state.clear()
            return

        await query.message.edit_text(
            f"üìÖ Voc√™ selecionou a data: {data_selecionada_str}\nEscolha um hor√°rio dispon√≠vel para o servi√ßo de {servico.replace('h', ' hora').replace('pernoite', 'Pernoite')}:",
            reply_markup=get_horarios_keyboard(data_selecionada_str, servico),
        )
        await state.set_state(SelecaoHorarioStates.escolhendo_horario)

    elif query_data.startswith("confirmar_"):
        _, data, horario, servico = query_data.split("_")

        user_data = await state.get_data()

        # Construir a mensagem para o WhatsApp
        mensagem_whatsapp = f"Ol√°! Gostaria de agendar um atendimento de {servico.replace('h', ' hora').replace('pernoite', 'Pernoite')} para o dia {data} √†s {horario}."

        # Link do WhatsApp
        whatsapp_link = f"https://wa.me/{WHATSAPP_NUMBER}?text={mensagem_whatsapp}"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ Confirmar e Pagar", url=whatsapp_link)],
                [
                    InlineKeyboardButton(
                        text="üîô Voltar ao Menu Principal", callback_data="voltar_menu"
                    )
                ],
            ]
        )

        await query.message.edit_text(
            f"üéâ Agendamento quase conclu√≠do!\n\n"
            f"Servi√ßo: {servico.replace('h', ' hora').replace('pernoite', 'Pernoite')}\n"
            f"Data: {data}\n"
            f"Hor√°rio: {horario}\n\n"
            f'Clique em "Confirmar e Pagar" para finalizar o agendamento e ser redirecionado(a) para o WhatsApp para combinar o pagamento.',
            reply_markup=keyboard,
        )
        await state.clear()  # Limpar o estado ap√≥s a confirma√ß√£o

    elif query_data == "grupo_previas":
        # Aqui voc√™ pode adicionar o link para o grupo de pr√©vias
        await query.message.edit_text(
            "Acesse nosso grupo de pr√©vias exclusivo para conte√∫dos especiais! [Link do Grupo](https://t.me/+FgJVW0A6p0wzMGU5)",
            parse_mode="Markdown",
            reply_markup=get_main_menu(),
        )

    elif query_data == "contato":
        # Aqui voc√™ pode adicionar as informa√ß√µes de contato
        await query.message.edit_text(
            f"Para falar diretamente comigo, entre em contato via WhatsApp: [Clique aqui](https://wa.me/{+5579991196359})",
            parse_mode="Markdown",
            reply_markup=get_main_menu(),
        )

    elif query_data == "voltar_menu":
        await query.message.edit_text(
            "Selecione uma op√ß√£o abaixo para come√ßar:", reply_markup=get_main_menu()
        )

    elif query_data == "admin_programar_msg":
        await query.message.edit_text(
            "Envie a mensagem que deseja programar:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîô Voltar", callback_data="admin_panel"
                        )
                    ]
                ]
            ),
        )
        await state.set_state(AdminStates.programando_mensagem)

    elif query_data == "admin_panel":
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìù Programar Mensagem",
                        callback_data="admin_programar_msg",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚öôÔ∏è Configura√ß√µes", callback_data="admin_config"
                    )
                ],
            ]
        )
        await query.message.edit_text("Painel Administrativo:", reply_markup=keyboard)

    elif query_data == "admin_config":
        await query.message.edit_text(
            "Configura√ß√µes (em desenvolvimento).",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîô Voltar", callback_data="admin_panel"
                        )
                    ]
                ]
            ),
        )


@dp.message(AdminStates.programando_mensagem)
async def receber_mensagem_programar(message: types.Message, state: FSMContext):
    mensagem_para_programar = message.text
    await state.update_data(mensagem_programada=mensagem_para_programar)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="Enviar para todos os grupos gerenciados",
                    callback_data="programar_msg_todos_grupos",
                )
            ],
            [
                InlineKeyboardButton(
                    text="Escolher grupos espec√≠ficos",
                    callback_data="programar_msg_escolher_grupos",
                )
            ],
            [InlineKeyboardButton(text="üîô Voltar", callback_data="admin_panel")],
        ]
    )
    await message.reply(
        "Mensagem recebida. Agora, escolha onde enviar e quando:", reply_markup=keyboard
    )
    await state.set_state(
        AdminStates.configurando_grupo
    )  # Mudar para um estado mais apropriado, talvez para escolher hor√°rio e grupos


@dp.callback_query(AdminStates.configurando_grupo)
async def configurar_programacao_mensagem(
    query: types.CallbackQuery, state: FSMContext
):
    query_data = query.data
    await query.answer()

    if query_data == "programar_msg_todos_grupos":
        user_data = await state.get_data()
        mensagem = user_data.get("mensagem_programada")

        # Solicitar hor√°rio
        await query.message.edit_text(
            "Por favor, envie o hor√°rio (HH:MM) para a mensagem programada (ex: 10:30):"
        )
        await state.set_state(
            AdminStates.programando_mensagem_horario
        )  # Novo estado para receber o hor√°rio

    elif query_data == "programar_msg_escolher_grupos":
        grupos = obter_grupos_gerenciados()
        if not grupos:
            await query.message.edit_text(
                "Nenhum grupo gerenciado encontrado. Por favor, adicione grupos primeiro.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üîô Voltar", callback_data="admin_panel"
                            )
                        ]
                    ]
                ),
            )
            await state.clear()
            return

        keyboard_grupos = []
        for grupo in grupos:
            keyboard_grupos.append(
                [
                    InlineKeyboardButton(
                        text=grupo[2], callback_data=f"selecionar_grupo_{grupo[1]}"
                    )
                ]
            )  # grupo[2] √© o nome, grupo[1] √© o ID

        keyboard_grupos.append(
            [InlineKeyboardButton(text="üîô Voltar", callback_data="admin_panel")]
        )

        await query.message.edit_text(
            "Selecione os grupos para enviar a mensagem:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_grupos),
        )
        await state.set_state(
            AdminStates.selecionando_grupos_para_mensagem
        )  # Novo estado para sele√ß√£o de grupos

    elif query_data == "admin_panel":
        await state.clear()
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìù Programar Mensagem",
                        callback_data="admin_programar_msg",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚öôÔ∏è Configura√ß√µes", callback_data="admin_config"
                    )
                ],
            ]
        )
        await query.message.edit_text("Painel Administrativo:", reply_markup=keyboard)


@dp.message(AdminStates.programando_mensagem_horario)
async def receber_horario_programar(message: types.Message, state: FSMContext):
    horario = message.text
    # Valida√ß√£o simples de formato HH:MM
    try:
        datetime.strptime(horario, "%H:%M")
    except ValueError:
        await message.reply(
            "Formato de hor√°rio inv√°lido. Por favor, use HH:MM (ex: 10:30)."
        )
        return

    user_data = await state.get_data()
    mensagem = user_data.get("mensagem_programada")

    # Por enquanto, salva sem dias da semana ou grupo espec√≠fico
    salvar_mensagem_programada(mensagem, horario)
    await message.reply(
        "Mensagem programada com sucesso para todos os grupos gerenciados neste hor√°rio!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô Voltar ao Painel Admin", callback_data="admin_panel"
                    )
                ]
            ]
        ),
    )
    await state.clear()


@dp.callback_query(AdminStates.selecionando_grupos_para_mensagem)
async def selecionar_grupos_para_mensagem(
    query: types.CallbackQuery, state: FSMContext
):
    query_data = query.data
    await query.answer()

    if query_data.startswith("selecionar_grupo_"):
        grupo_id_selecionado = query_data.split("_")[2]
        user_data = await state.get_data()

        # Adicionar o grupo selecionado √† lista de grupos para a mensagem
        grupos_selecionados = user_data.get("grupos_selecionados_msg", [])
        if grupo_id_selecionado not in grupos_selecionados:
            grupos_selecionados.append(grupo_id_selecionado)
            await state.update_data(grupos_selecionados_msg=grupos_selecionados)
            await query.message.edit_text(
                f"Grupo {grupo_id_selecionado} adicionado. Selecione mais ou finalize:",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="Finalizar sele√ß√£o e programar",
                                callback_data="finalizar_selecao_grupos",
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="üîô Voltar", callback_data="admin_panel"
                            )
                        ],
                    ]
                ),
            )
        else:
            await query.message.edit_text(
                f"Grupo {grupo_id_selecionado} j√° selecionado. Selecione mais ou finalize:",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="Finalizar sele√ß√£o e programar",
                                callback_data="finalizar_selecao_grupos",
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="üîô Voltar", callback_data="admin_panel"
                            )
                        ],
                    ]
                ),
            )

    elif query_data == "finalizar_selecao_grupos":
        user_data = await state.get_data()
        grupos_selecionados = user_data.get("grupos_selecionados_msg", [])
        mensagem = user_data.get("mensagem_programada")

        if not grupos_selecionados:
            await query.message.edit_text(
                "Nenhum grupo selecionado. Por favor, selecione pelo menos um grupo.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üîô Voltar", callback_data="admin_panel"
                            )
                        ]
                    ]
                ),
            )
            return

        await query.message.edit_text(
            "Por favor, envie o hor√°rio (HH:MM) para a mensagem programada (ex: 10:30):"
        )
        await state.set_state(
            AdminStates.programando_mensagem_horario_grupos_especificos
        )  # Novo estado para receber o hor√°rio para grupos espec√≠ficos

    elif query_data == "admin_panel":
        await state.clear()
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìù Programar Mensagem",
                        callback_data="admin_programar_msg",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚öôÔ∏è Configura√ß√µes", callback_data="admin_config"
                    )
                ],
            ]
        )
        await query.message.edit_text("Painel Administrativo:", reply_markup=keyboard)


@dp.message(AdminStates.programando_mensagem_horario_grupos_especificos)
async def receber_horario_programar_grupos_especificos(
    message: types.Message, state: FSMContext
):
    horario = message.text
    try:
        datetime.strptime(horario, "%H:%M")
    except ValueError:
        await message.reply(
            "Formato de hor√°rio inv√°lido. Por favor, use HH:MM (ex: 10:30)."
        )
        return

    user_data = await state.get_data()
    mensagem = user_data.get("mensagem_programada")
    grupos_selecionados = user_data.get("grupos_selecionados_msg", [])

    for grupo_id in grupos_selecionados:
        salvar_mensagem_programada(mensagem, horario, grupo_id=grupo_id)

    await message.reply(
        "Mensagem programada com sucesso para os grupos selecionados neste hor√°rio!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô Voltar ao Painel Admin", callback_data="admin_panel"
                    )
                ]
            ]
        ),
    )
    await state.clear()


# Fun√ß√£o principal para iniciar o bot
async def main():
    init_db()
    # Iniciar o processamento de mensagens programadas em uma tarefa em segundo plano
    asyncio.create_task(processar_mensagens_programadas())
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.info("Bot iniciado!")
    asyncio.run(main())
